[
    {
        "question_id": 224192900,
        "question": "<p><img src=\"/ugc/2023-09-24/bd013293-8a1e-45d5-89c5-ded2012cb2e3-image.png\" class=\"fr-fic fr-fil fr-dib\" style=\"width: 375px;\"></p>",
        "type_id": 2,
        "points": "1",
        "order_id": null,
        "explanation": "",
        "show_explanation": false,
        "shuffle_answers": 1,
        "shuffle_answers2": true,
        "extra_credit": 0,
        "is_survey": false,
        "is_case_sensitive": null,
        "ignore_accents": null,
        "ignore_whitespace": null,
        "ignore_punctuation": null,
        "answers": [
            {
                "answer_id": 832357284,
                "answer": "<p><img src=\"/ugc/2023-09-24/957ea7d5-6937-49eb-a1d2-595a8756de34-image.png\" class=\"fr-fic fr-fil fr-dib\"></p>",
                "correct": 0,
               
            },
            {
                "answer_id": 832357282,
                "answer": "<p>3rd option&nbsp;</p>",
                "correct": 1,
                "order_id": null,
                "related_answer_id": null,
                "related_answer_id2": null,
                "is_pinned": 0,
                "is_regex": 0
            },
            {
                "answer_id": 832357280,
                "answer": "<p>fourth option</p>",
                "correct": 0,
                "order_id": null,
                "related_answer_id": null,
                "related_answer_id2": null,
                "is_pinned": 0,
                "is_regex": 0
            }
        ],
        "quiz_name": "demo",
        "sample_size": null,
        "give_partial_credit": 0,
        "answer_style": "radio",
        "match_style": null,
        "is_pinned": 32,
        "compress_images": null
    }
]


{
    name: 'Md. Ashraful Islam',
    phone: '01839886977',
    startTime: 2023 - 12 - 19 T18: 55: 49.458 Z,
    endTime: 2023 - 12 - 19 T18: 55: 49.458 Z,
    marks: 0,
    percentage: 100,
    questions: [{
        questionId: new ObjectId("6580d81ebb5675f4b1881174"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466776c")
    }, {
        questionId: new ObjectId("6580d7d174e9214d49d29b5d"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466776d")
    }, {
        questionId: new ObjectId("6580d7569e79154c207b1bd4"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466776e")
    }, {
        questionId: new ObjectId("6580d711677b9c2709f167e3"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466776f")
    }, {
        questionId: new ObjectId("65819a7bebd2dc740d977b94"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667770")
    }, {
        questionId: new ObjectId("6580d6f6677b9c2709f167d3"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667771")
    }, {
        questionId: new ObjectId("6580d6df677b9c2709f167be"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667772")
    }, {
        questionId: new ObjectId("6580d6c0677b9c2709f167ad"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667773")
    }, {
        questionId: new ObjectId("6580d6df677b9c2709f167c0"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667774")
    }, {
        questionId: new ObjectId("6580d6bf677b9c2709f167a5"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667775")
    }, {
        questionId: new ObjectId("6580d6bd677b9c2709f1679b"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667776")
    }, {
        questionId: new ObjectId("6580d6bb677b9c2709f16791"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667777")
    }, {
        questionId: new ObjectId("658185c7812339fbf741d2f6"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667778")
    }, {
        questionId: new ObjectId("6580d6b8677b9c2709f16784"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667779")
    }, {
        questionId: new ObjectId("6580d6b8677b9c2709f1677d"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466777a")
    }, {
        questionId: new ObjectId("6580d28d0294068539957fc2"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466777b")
    }, {
        questionId: new ObjectId("6580d2450294068539957fa2"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466777c")
    }, {
        questionId: new ObjectId("6580d2450294068539957fa4"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466777d")
    }, {
        questionId: new ObjectId("6580d2410294068539957f95"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466777e")
    }, {
        questionId: new ObjectId("6580d1a10294068539957f76"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466777f")
    }, {
        questionId: new ObjectId("6580d1a10294068539957f78"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667780")
    }, {
        questionId: new ObjectId("6580d1a10294068539957f7a"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667781")
    }, {
        questionId: new ObjectId("6580d1a00294068539957f60"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667782")
    }, {
        questionId: new ObjectId("6580d1a00294068539957f62"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667783")
    }, {
        questionId: new ObjectId("6580d19c0294068539957f53"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667784")
    }, {
        questionId: new ObjectId("6580d17e0294068539957f3f"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667785")
    }, {
        questionId: new ObjectId("6580d17e0294068539957f41"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667786")
    }, {
        questionId: new ObjectId("6580d1780294068539957f32"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667787")
    }, {
        questionId: new ObjectId("6580d0e20294068539957ebf"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667788")
    }, {
        questionId: new ObjectId("6580d0e20294068539957ec1"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667789")
    }, {
        questionId: new ObjectId("6580d0e20294068539957ec3"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466778a")
    }, {
        questionId: new ObjectId("6580d0e20294068539957ec5"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466778b")
    }, {
        questionId: new ObjectId("6580d0dd0294068539957e97"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466778c")
    }, {
        questionId: new ObjectId("6580d0dd0294068539957e99"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466778d")
    }, {
        questionId: new ObjectId("6580d0dd0294068539957e9b"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466778e")
    }, {
        questionId: new ObjectId("6580d0db0294068539957e73"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c7466778f")
    }, {
        questionId: new ObjectId("6580d0dd0294068539957e9d"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667790")
    }, {
        questionId: new ObjectId("65819585ebd2dc740d977ac5"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667791")
    }, {
        questionId: new ObjectId("6581a669d4731d153b171cce"),
        userAnswer: -1,
        _id: new ObjectId("6581e7355f6ba06c74667792")
    }],
    _id: new ObjectId("6581e7355f6ba06c7466776b"),
    __v: 0
}











<div id="slide-menu">
    <div class="item-menu">
      ALL
    </div>
    <div class="item-menu">
      SSC
    </div>
    <div class="item-menu">
      HSC
    </div>
    <div class="item-menu">
      ADMISSION
    </div>
    <div class="item-menu">
      ISSB
    </div>
  
    <div class="item-menu">
      BCS
    </div>
  </div>
  
  
  
  
  
  
  
  <section class="questions-box">

  
        <div class="qcontainer <%= exam.exam_type %>" id="question<%= counter %>">
           <p>
              <span><b><%= counter %>)&nbsp;</b></span>
              <b><%- exam.question %></b>
           </p>
           <% let optionCounter = 1; %>
           
           <% exam.option.forEach((option, index) => { %>
           <div class="options">
               <input
                   type="radio"
                   id="option<%= optionCounter %><%= counter %>"
                   name="<%= exam._id %>"
                   value="<%= index + 1 %>"
                   <%= exam.your_answer === String(index + 1) ? 'checked' : 'disabled' %>
               />
               <label for="option<%= optionCounter %><%= counter %>"><%- option %></label>
           </div>
           <% optionCounter++; %>
           <% }) %>
           
        
          <div class="explainer">
  <% if (data.show_explanation) { %>
            <div class="explain">
               <p>Explanation</p>
            </div>
            <% } %>
  
            <a class="love" href="/issb/verbal/<%= data.exam_code %>?id=<%= exam._id %>">
              <p><%= exam.doubts_count %></p>
              <i class="<%= exam.doubt == 0 ? 'fa-regular fa-heart' : 'fa-solid fa-heart' %>"></i>
           </a>
         </div>
  
         <% if (data.show_explanation) { %>
          <div class="explain-toggle-show">
            <p><%- exam.explanation %></p>
          </div>
        <% } %>
      </div>
      <% counter++ %>
    <% }) %>
  </section>










  const mongoose = require('mongoose');

const examSettingSchema = new mongoose.Schema({
  exam_code: {
    type: Number,
    
  },
  exam_name: {
    type: String,
  },  
  instruction: {
    type: String,
  },
  conclusion_text: {
    type: String,
  },
  custom_message: {
    type: Boolean,
    default: false,
  },
  passing_score1: {
    type: Number,
    default: 80,
  },
  
  passing_score2: {
    type: Number,
    default: 50,
  },
  failing_score: {
    type: Number,
    default: 33,
  },
  message_on_pass1: {
    type: String,
  },
  message_on_pass2: {
    type: String,
  },
  message_on_fail: {
    type: String,
  },
  show_score: {
    type: Boolean,
    default: false,
  },
  show_right_wrong: {
    type: Boolean,
    default: false,
  },
  practice: {
    type: Boolean,
    default: false,
  },
  show_explanation: {
    type: Boolean,
    default: false,
  },
  randomize: {
    type: Boolean,
    default: false,
  },
  negative_marking: {
    type: Boolean,
    default: false,
    },
    unlimited_attempt: {
      type: Boolean,
      default: false,
    },

  attempt: {
    type: Number,
    default: 0,
  },
  published: {
    type: Boolean,
    default: false,
  },
  active_status: {
    type: String,    // the value can be closed,open,scheduled
    default: "closed",
  },
  exam_access: {
    type: Boolean,    // if the value is ture then it means it is a free exam if false then this exam is created for particular course purchased user
    default: "false",
  },
  startDateTime: {
    type: Date,
  },
  endDateTime: {
    type: Date,
  },
is_live: {
      type: Boolean,
      default: false,
    },
    
  course_added: {
    type: [String], // Assuming an array of course IDs now you have to check from the users payment history weather he boutght this course or not if yes then if he is banned or not if ban then return dirrect result that is is banned from the course so the can not take part the exam. if not ban then is it validity yet has or not. if yes then give me exam access if false then show him he is no longer accisible to this exam.  
  },
  course_tags: {
    type: [String], // Assuming an array of course tags
  },
  time: {
    type: Number,
    default: 0,
  },
  unlimited_time: {
    type: Boolean,
    default: false,
  },
  questions: {
    type: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Question', // Referencing the Question model
    }],
  },
  user_result: {
    type: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: 'UserResult', // Referencing the Question model
    }],
  },
  createdAt: {
    type: Date,
    default: Date.now,
  }
});


module.exports = {
  ExamSetting,
  Question,
  Doubt,
  UserResult
};




const mongoose = require('mongoose');

first check weather he bouth any of courses that match the type of our examsettings for the particular exam   course_added in the array this purchased courses are matched or not . 
    const paymentSchema = new mongoose.Schema({
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    course: { type: mongoose.Schema.Types.ObjectId, ref: 'military_course', required: true },
    paymentPhone: { type: String, required: true },
    course_id: { type: String, required: true },
    amount: { type: Number, required: true },
    paymentDate: {
      type: Date,
      default: Date.now
    },
    validityDate: {
      type: Date,
      required: false,
      default: function() {
        // Set the validity date to 6 months from the payment date
        return new Date(Date.now() + (6 * 30 * 24 * 60 * 60 * 1000)); // 6 months * 30 days * 24 hours * 60 minutes * 60 seconds * 1000 milliseconds
      },
     
    }, // check the validity of the course 
    paymentMethod: { type: String, required: true },
    transactionId: { type: String, required: true },
    is_active: { type: Boolean, required: true ,default: false, },
    is_banned: { type: Boolean, required: true ,default: false, }, // check if the user banned or not 
    ValidityState: { type: String, }
  });
  
  
  const Payment = mongoose.model('Payment', paymentSchema);
  
  module.exports = {
  Payment,
  };
  

<script>
    

const examValidation = async (req, res) => {
  try {
    const examCode = req.params.id;
    const userPhoneNumber = req.user.phone;

    // Step 01: Check Exam Link Status
    const examDetails = await ExamSetting.findOne({ exam_code: examCode });

    if (!examDetails || examDetails.active_status === 'closed') {
      // Exam link is closed or not found
      console.log('Step 01: Exam link is closed or not found.');
      return res.render('admin/exam-validation', { message: 'You should contact with admin to open the exam.' });
    }

    // Step 02: Check Free Access
    if (examDetails.is_anyone && examDetails.active_status === 'open') {
      // Exam is open
      console.log('Step 02: Exam is open.');
      return res.redirect(`/issb/verbal/${examCode}/exam`, { message: 'This exam is open. You can take this exam anytime.' });
    }

    // Step 03: Check Purchased Courses
    const userPurchasedCourses = await Payment.find({ user: req.user._id });
    const purchasedCourseIds = userPurchasedCourses.map(course => course.course_id);

    const isCoursePurchased = purchasedCourseIds.some(courseId => examDetails.course_added.includes(courseId));

    if (isCoursePurchased && examDetails.active_status === 'open') {
      // Exam is open
      console.log('Step 03: Exam is open.');
      return res.redirect(`/issb/verbal/${examCode}/exam`, { message: 'This exam is open. You can take this exam anytime.' });
    } else {
      // No purchased courses match; suggest available exams
      const availableExams = await ExamSetting.find({ exam_added: { $in: purchasedCourseIds } });

      console.log('Step 03: No purchased courses match.');
      return res.render('admin/exam-validation', { message: 'You can use these exams for access: ', exams: availableExams });
    }

  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: 'Failed to perform exam validation' });
  }
};


</script>


  